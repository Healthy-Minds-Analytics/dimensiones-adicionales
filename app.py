# app.py
import streamlit as st
import json
from Generar_informe_Satisfaccion import generar_informe_satisfaccion
from Generar_informe_Burnout import generar_informe_burnout
from Generar_informe_Generico import generar_informe_generico

st.set_page_config(page_title="Generador de Informes", layout="wide")

st.title("üìù Generador de Informes Word")

# 1) Selecci√≥n de informe
report_type = st.selectbox(
    "¬øQu√© informe quieres generar?",
    ["Satisfacci√≥n laboral", "Burnout", "Gen√©rico"]
)

st.markdown("---")

# 2) Campos comunes
csv_file = st.file_uploader("Sube tu archivo CSV", type="csv")
empresa = st.text_input("Nombre de la empresa")
invitados = st.number_input("N√∫mero de invitados", min_value=1, value=1)

# 3) Campos espec√≠ficos seg√∫n informe
if report_type == "Satisfacci√≥n laboral":
    st.subheader("Par√°metros ‚Äì Satisfacci√≥n laboral")
    num_medidas = st.slider("N√∫mero de medidas a proponer", 1, 10, 3)
elif report_type == "Burnout":
    st.subheader("Par√°metros ‚Äì Burnout")
    limite_alerta = st.slider("L√≠mite para alertas", 1, 15, 10)
    # y m√°s inputs que requiera Burnout‚Ä¶
elif report_type == "Gen√©rico":
    titulo = st.text_input("T√≠tulo del informe")
    json_file = st.file_uploader("JSON de preguntas", type="json")
    if json_file:
        # Carga en memoria
        json_data = json.load(json_file)
        # Extrae la lista de locales
        locales = json_data.get("availableLocales", [])
        # Desplegable con esos valores
        locale = st.selectbox("Idioma del informe", locales)
    else:
        st.info("Sube el JSON de preguntas para elegir idioma")

st.markdown("---")

# 4) Bot√≥n de generaci√≥n
if st.button("‚ñ∂Ô∏è Generar informe"):
    # Validaciones b√°sicas
    if not csv_file:
        st.error("‚ùå Debes subir primero un archivo CSV.")
    else:
        # Llamada exclusiva seg√∫n la elecci√≥n
        if report_type == "Satisfacci√≥n laboral":
            docx_bytes = generar_informe_satisfaccion(
                csv_file,
                empresa=empresa,
                invitados=invitados,
                num_medidas=num_medidas,
                # ‚Ä¶otros params‚Ä¶
            )
            filename = f"Satisfaccion_{empresa}.docx"
        elif report_type == "Burnout":  # Burnout
            docx_bytes = generar_informe_burnout(
                csv_file,
                empresa=empresa,
                invitados=invitados,
                limite=limite_alerta,
            )
            filename = f"Burnout_{empresa}.docx"

        else: #if report_type == "Generico":  # Gen√©rico
            if not json_file:
                st.error("‚ùå Debes subir un JSON de preguntas")
            elif not titulo:
                st.error("‚ùå Debes ingresar un t√≠tulo para el informe")
            elif not empresa:
                st.error("‚ùå Debes ingresar el nombre de la empresa")
            elif not locale:
                st.error("‚ùå Debes elegir un idioma para el informe")
            else:
                docx_bytes = generar_informe_generico(
                    csv_source=csv_file,
                    json_source=json_file,
                    empresa=empresa,
                    titulo=titulo,
                    invitados=invitados,
                    locale=locale,
                )
                filename = f"{titulo.replace(' ','_')}_{empresa}.docx"


        # 5) Descarga directa
        st.download_button(
            label="üì• Descargar informe Word",
            data=docx_bytes,
            file_name=filename,
            mime="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        )
